
In an undirected graph, (i,j) means that node i and node j are connected with an undirected edge.
Please play two roles (Alice and Bob) to implement DFS on an undirected graph: 
As Alice, you should remember the current node x and previous node y. You can start from any unvisited node. In every turn, you ask Bob whether x can go to z. If Bob replies yes, you can DFS into z, then the previous node becomes x. If there is no node to DFS into, you can tell Bob to pop the stack, then Bob will tell you the new current node and previous node.

As Bob, you should strictly promise your correctness. You should keep a stack. Node x can DFS into z if and only if (x and z are connected) and (z is not y) and (z is not x). When Alice DFS into one node z, you should push node z to your stack.
When there is one node existing in the stack more than once at a time, you should say "the answer is yes" and break the conversation. After performing the stack pop, please tell Alice that the current node is the last node in the stack, and the previous node is the second-to-last node in the stack (which may not exist).
After finishing DFS, if there is no cycle, you should reply "the answer is no".

Here are two examples:
--------Example begins---------


In an undirected graph, (i,j) means that node i and node j are connected with an undirected edge.  
The nodes are numbered from 0 to 5, and the edges are:  (3,5) (1,0) (3,0) (3,4) (4,1) (2,3)  
Q: Is there a cycle in this graph?  
Let's start implementing DFS for the given graph. The nodes are 0, 1, 2, 3, 4, and 5, with edges (3,5) (1,0) (3,0) (3,4) (4,1) (2,3).  

### Initialization:  
- Current graph representation:  
  - 0: [1, 3]  
  - 1: [0, 4]  
  - 2: [3]  
  - 3: [0, 4]  
  - 4: [1, 3]  
  - 5: [3]  

### Starting DFS:  
- **Alice**: "I will start at node 0 and there is no previous node (y = none). My current node (x) is 0."  

- **Bob**: "The current stack is [0]. What do you want to check?"  

- **Alice**: "Can node 0 go to node 1?"  

- **Bob**: "Yes, node 0 is connected to node 1. I will push 1 onto the stack."  

- **Alice**: "Now, I will go to node 1. The previous node (y) is now 0. My current node (x) is 1."  

- **Bob**: "The current stack is [0,1]. What do you want to check?"  

- **Alice**: "Can node 1 go to node 0?"  

- **Bob**: "No, it's the previous node."  

- **Alice**: "Can node 1 go to node 4?"  

- **Bob**: "Yes, node 1 is connected to node 4. I will push 4 onto the stack."  

- **Alice**: "Now, I will go to node 4. The previous node (y) is 1. My current node (x) is 4."  

- **Bob**: "The current stack is [0,1,4]. What do you want to check?"  

- **Alice**: "Can node 4 go to node 3?"  

- **Bob**: "Yes, node 3 is connected to node 4. I will push 3 onto the stack."  

- **Alice**: "Now, I will go to node 3. The previous node (y) is 4. My current node (x) is 3."  

- **Bob**: "The current stack is [0,1,4,3]. What do you want to check?"  

- **Alice**: "Can node 3 go to node 2?"  

- **Bob**: "Yes, node 2 is connected to node 3. I will push 2 onto the stack."  

- **Alice**: "Now, I will go to node 2. The previous node (y) is 3. My current node (x) is 2."  

- **Bob**: "The current stack is [0,1,4,3,2]. What do you want to check?"  

- **Alice**: "Can node 2 go to any other nodes?"  

- **Bob**: "No, there are no other connections."  

- **Alice**: "I will pop the stack."  

- **Bob**: "The current node is 3, and the previous node is 4. The current stack is [0,1,4,3]. What do you want to check next?"  

- **Alice**: "Can node 3 go to node 0?"  

- **Bob**: "Yes, node 0 is connected to node 3. I will push 0 onto the stack."  

- **Alice**: "Now, I will go to node 0. The previous node (y) is 3. My current node (x) is 0."  

- **Bob**: "The current stack is [0,1,4,3,0]. The answer is yes."  
--------Example ends---------